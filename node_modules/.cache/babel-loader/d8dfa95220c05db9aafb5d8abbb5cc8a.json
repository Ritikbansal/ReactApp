{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\app1\\\\src\\\\components\\\\MusicCard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react'; //import song from './Suncrown - Legend of the Forgotten Centuries.mp3'\n\nimport Slider from './Slider';\nimport ControlPanel from './ControlPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MusicCard() {\n  _s();\n\n  const [percentage, setPercentage] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audioRef = useRef();\n\n  const onChange = e => {\n    const audio = audioRef.current;\n    audio.currentTime = audio.duration / 100 * e.target.value;\n    setPercentage(e.target.value);\n  };\n\n  const play = () => {\n    const audio = audioRef.current;\n    audio.volume = 0.1;\n\n    if (!isPlaying) {\n      setIsPlaying(true);\n      audio.play();\n    }\n\n    if (isPlaying) {\n      setIsPlaying(false);\n      audio.pause();\n    }\n  };\n\n  const getCurrDuration = e => {\n    const percent = (e.currentTarget.currentTime / e.currentTarget.duration * 100).toFixed(2);\n    setPercentage(+percent); //console.log(+percent);\n\n    setCurrentTime(e.currentTarget.currentTime.toFixed(2));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"logo\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa fa-music\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 18\n      }, this), \"Music\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"show_song_no\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"present\",\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"total\",\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"left\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"track_image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"volume\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"volume_show\",\n          children: \"90\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          class: \"fa fa-volume-up\",\n          \"aria-hidden\": \"true\",\n          onclick: \"mute_sound()\",\n          id: \"volume_icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 40\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          value: \"90\",\n          onchange: \"volume_change()\",\n          id: \"volume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 131\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"right\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"song_detail\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title\",\n          children: \"title.mp3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"artist\",\n          children: \"Artist name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        percentage: percentage,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        onTimeUpdate: getCurrDuration,\n        onLoadedData: e => {\n          setDuration(e.currentTarget.duration.toFixed(2));\n        },\n        src: \"http://wb.saccount.workers.dev/0:/listringtones-com-iphone-trap-remix-53551.mp3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n        play: play,\n        isPlaying: isPlaying,\n        duration: duration,\n        currentTime: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 1\n  }, this);\n}\n\n_s(MusicCard, \"hWzC6cXACk0W7vgDeg1g+KdNPG4=\");\n\n_c = MusicCard;\nexport default MusicCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicCard\");","map":{"version":3,"sources":["E:/react/app1/src/components/MusicCard.js"],"names":["useState","useRef","Slider","ControlPanel","MusicCard","percentage","setPercentage","isPlaying","setIsPlaying","duration","setDuration","currentTime","setCurrentTime","audioRef","onChange","e","audio","current","target","value","play","volume","pause","getCurrDuration","percent","currentTarget","toFixed"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AACA,SAASC,SAAT,GAAqB;AAAA;;AACjB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,CAAD,CAA9C;AAEA,QAAMa,QAAQ,GAAGZ,MAAM,EAAvB;;AAEA,QAAMa,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAMC,KAAK,GAAGH,QAAQ,CAACI,OAAvB;AACAD,IAAAA,KAAK,CAACL,WAAN,GAAqBK,KAAK,CAACP,QAAN,GAAiB,GAAlB,GAAyBM,CAAC,CAACG,MAAF,CAASC,KAAtD;AACAb,IAAAA,aAAa,CAACS,CAAC,CAACG,MAAF,CAASC,KAAV,CAAb;AACD,GAJD;;AAMA,QAAMC,IAAI,GAAG,MAAM;AACjB,UAAMJ,KAAK,GAAGH,QAAQ,CAACI,OAAvB;AACAD,IAAAA,KAAK,CAACK,MAAN,GAAe,GAAf;;AAEA,QAAI,CAACd,SAAL,EAAgB;AACdC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,MAAAA,KAAK,CAACI,IAAN;AACD;;AAED,QAAIb,SAAJ,EAAe;AACbC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAQ,MAAAA,KAAK,CAACM,KAAN;AACD;AACF,GAbD;;AAeA,QAAMC,eAAe,GAAIR,CAAD,IAAO;AAC7B,UAAMS,OAAO,GAAG,CAAET,CAAC,CAACU,aAAF,CAAgBd,WAAhB,GAA8BI,CAAC,CAACU,aAAF,CAAgBhB,QAA/C,GAA2D,GAA5D,EAAiEiB,OAAjE,CAAyE,CAAzE,CAAhB;AAGApB,IAAAA,aAAa,CAAC,CAACkB,OAAF,CAAb,CAJ6B,CAK7B;;AACAZ,IAAAA,cAAc,CAACG,CAAC,CAACU,aAAF,CAAgBd,WAAhB,CAA4Be,OAA5B,CAAoC,CAApC,CAAD,CAAd;AACD,GAPD;;AAUA,sBACJ;AAAK,IAAA,KAAK,EAAC,MAAX;AAAA,4BACI;AAAG,MAAA,EAAE,EAAC,MAAN;AAAA,8BAAa;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAC,cAAX;AAAA,8BACI;AAAG,QAAA,EAAE,EAAC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAG,QAAA,EAAE,EAAC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI;AAAK,MAAA,KAAK,EAAC,MAAX;AAAA,mCAAmB;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cAAnB,eACI;AAAK,QAAA,KAAK,EAAC,QAAX;AAAA,gCACI;AAAG,UAAA,EAAE,EAAC,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,oBAC+B;AAAG,UAAA,KAAK,EAAC,iBAAT;AAA2B,yBAAY,MAAvC;AAA8C,UAAA,OAAO,EAAC,cAAtD;AAAqE,UAAA,EAAE,EAAC;AAAxE;AAAA;AAAA;AAAA;AAAA,gBAD/B,oBAC0H;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,GAAG,EAAC,GAAxB;AAA4B,UAAA,GAAG,EAAC,KAAhC;AAAsC,UAAA,KAAK,EAAC,IAA5C;AAAiD,UAAA,QAAQ,EAAC,iBAA1D;AAA4E,UAAA,EAAE,EAAC;AAA/E;AAAA;AAAA;AAAA;AAAA,gBAD1H;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAYI;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,8BACI;AAAK,QAAA,KAAK,EAAC,aAAX;AAAA,gCACI;AAAG,UAAA,EAAE,EAAC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAG,UAAA,EAAE,EAAC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,MAAD;AAAQ,QAAA,UAAU,EAAErB,UAApB;AAAgC,QAAA,QAAQ,EAAES;AAA1C;AAAA;AAAA;AAAA;AAAA,cALJ,eAME;AACE,QAAA,GAAG,EAAED,QADP;AAEE,QAAA,YAAY,EAAEU,eAFhB;AAGE,QAAA,YAAY,EAAGR,CAAD,IAAO;AACnBL,UAAAA,WAAW,CAACK,CAAC,CAACU,aAAF,CAAgBhB,QAAhB,CAAyBiB,OAAzB,CAAiC,CAAjC,CAAD,CAAX;AAED,SANH;AAOE,QAAA,GAAG,EAAC;AAPN;AAAA;AAAA;AAAA;AAAA,cANF,eAeE,QAAC,YAAD;AACE,QAAA,IAAI,EAAEN,IADR;AAEE,QAAA,SAAS,EAAEb,SAFb;AAGE,QAAA,QAAQ,EAAEE,QAHZ;AAIE,QAAA,WAAW,EAAEE;AAJf;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADI;AAqCH;;GA5EQP,S;;KAAAA,S;AA6ET,eAAeA,SAAf","sourcesContent":["import { useState, useRef } from 'react'\r\n//import song from './Suncrown - Legend of the Forgotten Centuries.mp3'\r\nimport Slider from './Slider'\r\nimport ControlPanel from './ControlPanel'\r\nfunction MusicCard() {\r\n    const [percentage, setPercentage] = useState(0)\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [duration, setDuration] = useState(0)\r\n    const [currentTime, setCurrentTime] = useState(0)\r\n  \r\n    const audioRef = useRef()\r\n  \r\n    const onChange = (e) => {\r\n      const audio = audioRef.current\r\n      audio.currentTime = (audio.duration / 100) * e.target.value\r\n      setPercentage(e.target.value)\r\n    }\r\n  \r\n    const play = () => {\r\n      const audio = audioRef.current\r\n      audio.volume = 0.1\r\n  \r\n      if (!isPlaying) {\r\n        setIsPlaying(true)\r\n        audio.play()\r\n      }\r\n  \r\n      if (isPlaying) {\r\n        setIsPlaying(false)\r\n        audio.pause()\r\n      }\r\n    }\r\n  \r\n    const getCurrDuration = (e) => {\r\n      const percent = ((e.currentTarget.currentTime / e.currentTarget.duration) * 100).toFixed(2)\r\n       \r\n  \r\n      setPercentage(+percent)\r\n      //console.log(+percent);\r\n      setCurrentTime(e.currentTarget.currentTime.toFixed(2))\r\n    }\r\n  \r\n\r\n    return(\r\n<div class=\"main\">\r\n    <p id=\"logo\"><i class=\"fa fa-music\"></i>Music</p> \r\n    <div class=\"show_song_no\">\r\n        <p id=\"present\">1</p>\r\n        <p>/</p>\r\n        <p id=\"total\">5</p>\r\n    </div>\r\n    <div class=\"left\"> <img id=\"track_image\"/>\r\n        <div class=\"volume\">\r\n            <p id=\"volume_show\">90</p> <i class=\"fa fa-volume-up\" aria-hidden=\"true\" onclick=\"mute_sound()\" id=\"volume_icon\"></i> <input type=\"range\" min=\"0\" max=\"100\" value=\"90\" onchange=\"volume_change()\" id=\"volume\"/>\r\n        </div>\r\n    </div>\r\n    <div class=\"right\">\r\n        <div class=\"song_detail\">\r\n            <p id=\"title\">title.mp3</p>\r\n            <p id=\"artist\">Artist name</p>\r\n        </div>\r\n        <Slider percentage={percentage} onChange={onChange} />\r\n      <audio\r\n        ref={audioRef}\r\n        onTimeUpdate={getCurrDuration}\r\n        onLoadedData={(e) => {\r\n          setDuration(e.currentTarget.duration.toFixed(2))\r\n          \r\n        }}\r\n        src=\"http://wb.saccount.workers.dev/0:/listringtones-com-iphone-trap-remix-53551.mp3\"\r\n      ></audio>\r\n      <ControlPanel\r\n        play={play}\r\n        isPlaying={isPlaying}\r\n        duration={duration}\r\n        currentTime={currentTime}\r\n      />\r\n    </div>\r\n</div>\r\n    )\r\n}\r\nexport default MusicCard;"]},"metadata":{},"sourceType":"module"}